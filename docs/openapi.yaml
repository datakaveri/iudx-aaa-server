openapi: 3.0.0
info:
  title: IUDX-AAA-Server
  version: 4.5.0
  description: 'API specification for IUDX AAA Server. These APIs are used by users manage tokens, policy etc. These APIs requires valid token or client details for authentication.'
  license:
    name: MIT
  contact:
    name: For support contact IUDX Team at
    email: support@iudx.org.in
servers:
  - url: 'https://authorization.iudx.org.in'
    description: Production
  - url: 'https://authvertx.iudx.io'
    description: Development
paths:
  /auth/v1/token:
    parameters: [ ]
    post:
      summary: Create Token
      operationId: post-auth-v1-token
      responses:
        '200':
          description: Access token has been successfully generated upon required validation and authentication.
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        minLength: 1
                      expiry:
                        type: number
                      server:
                        type: string
                        minLength: 1
                    required:
                      - accessToken
                      - expiry
                      - server
                required:
                  - type
                  - title
                  - results
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Token created
                    results:
                      accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiIzNDliNGI1NS0wMjUxLTQ5MGUtYmVlOS0wMGYzYTVkM2U2NDMiLCJpc3MiOiJhdXRoLnRlc3QuY29tIiwiYXVkIjoiZm9vYmFyLml1ZHguaW8iLCJleHAiOjE2MjY4MzY3ODQsImlhdCI6MTYyNjc5MzU4NCwiaWlkIjoicmc6ZXhhbXBsZS5jb20vNzllN2JmYTYyZmFkNmM3NjViYWM2OTE1NGMyZjI0Yzk0Yzk1MjIwYS9yZXNvdXJjZS1ncm91cCIsInJvbGUiOiJjb25zdW1lciIsImNvbnMiOnt9fQ.eAWKamrRdV4c1MPuoLU6j0bWB6iiM_of5F3LA-_DZGhyu_6aFP4cmCI1Y3ZN2ZRklOSGcrL5aHC8Ccga6dtTrg
                      expiry: 1626836784
                      server: foobar.iudx.io
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Token created
                    results:
                      accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiIzNDliNGI1NS0wMjUxLTQ5MGUtYmVlOS0wMGYzYTVkM2U2NDMiLCJpc3MiOiJhdXRoLnRlc3QuY29tIiwiYXVkIjoiZm9vYmFyLml1ZHguaW8iLCJleHAiOjE2MjY4MzY3ODQsImlhdCI6MTYyNjc5MzU4NCwiaWlkIjoicmc6ZXhhbXBsZS5jb20vNzllN2JmYTYyZmFkNmM3NjViYWM2OTE1NGMyZjI0Yzk0Yzk1MjIwYS9yZXNvdXJjZS1ncm91cCIsInJvbGUiOiJjb25zdW1lciIsImNvbnMiOnt9fQ.eAWKamrRdV4c1MPuoLU6j0bWB6iiM_of5F3LA-_DZGhyu_6aFP4cmCI1Y3ZN2ZRklOSGcrL5aHC8Ccga6dtTrg
                      expiry: 1626836784
                      server: foobar.iudx.io
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: Generally for missing or invalid payload details.
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  detail:
                    type: string
                    minLength: 1
                required:
                  - type
                  - title
                  - detail
              examples:
                Invalid Role:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: Role not defined
                    detail: Role not defined
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - Unauthorized - `clientId` & `clientSecret` invalid/not match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Missing Authentication Details:
                  value:
                    type: 'urn:dx:as:MissingAuthenticationToken'
                    title: Missing auth details
                    detail: Missing auth details
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            - User policy does not exist for the user and resource
            - APD policy does not exist for the resource
            - The user does not belong to the user class specified by the APD policy
            - The user is required to interact with the APD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                APD needs interaction:
                  value:
                    type: 'urn:dx:as:MissingInformation'
                    title: APD interaction required
                    detail: The APD requires extra information to grant access. Please use the apdToken and visit the link to interact with the APD
                    context:
                      apdToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJmY2JlY2QxOC0yZWNiLTQwNjYtOGE5ZS1mMDczYWFjYmU1NzkiLCJpc3MiOiJhdXRodmVydHguaXVkeC5pbyIsImF1ZCI6ImF1dGhkZXYuaXVkeC5pbyIsImV4cCI6MTY0ODg0MzEwNCwiaWF0IjoxNjQ4Nzk5OTA0LCJzaWQiOiI5ZGQ2NjNlZS02NWExLTQ4ZTctYTJiMC0wNTQwMmY5ZjlkOWYiLCJsaW5rIjoiYXV0aGRldi5pdWR4LmlvIn0.lP3Dn7aroXqVUdp0fbTh1uhrnjwo5Yx3l1lKorEIKhjzZivgBWkflbVN9Lly0yq5gefvYYXgf01nxmU3QNA2EQ
                      expiry: 1648843104
                      server: authdev.iudx.io
                      link: authdev.iudx.io
                APD policy verification failed (deny):
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Policy evaluation failed
                    detail: 'Not allowed, please contact APD Admin'
                No valid policy found:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Policy evaluation failed
                    detail: policy not found
      parameters:
        - schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
        - schema:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
            pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
          in: header
          name: clientId
          description: Keycloak Issued clientId
        - schema:
            type: string
            maxLength: 40
            pattern: '^[0-9a-f]{40}$'
            minLength: 40
            example: 73b66ab55ba4d07ea487310679aa0689b4bd2c9d
          in: header
          description: Keycloak Issued clientSecret
          name: clientSecret
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                itemId:
                  type: string
                  minLength: 1
                  pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
                  maxLength: 512
                itemType:
                  type: string
                  minLength: 1
                  enum:
                    - resource_server
                    - resource
                    - resource_group
                role:
                  type: string
                  maxLength: 10
                  minLength: 5
                  enum:
                    - provider
                    - delegate
                    - consumer
                    - admin
                    - trustee
                context:
                  type: object
              required:
                - itemId
                - itemType
                - role
            examples:
              Consumer requesting resource group:
                value:
                  itemId: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-aqm
                  itemType: resource_group
                  role: consumer
              Consumer requesting resource server (for access to public resources):
                value:
                  itemId: rs.iudx.org.in
                  itemType: resource_server
                  role: consumer
              Consumer requesting resource:
                value:
                  itemId: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-aqm/184ba502-22a8-ad15-a8f1-c966cd3aa7a7
                  itemType: resource
                  role: consumer
              Provider requesting resource group:
                value:
                  itemId: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-aqm
                  itemType: resource_group
                  role: provider
              Delegate requesting for resource:
                value:
                  itemId: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-aqm/184ba502-22a8-ad15-a8f1-c966cd3aa7a7
                  itemType: resource
                  role: delegate
              Admin of RS requesting resource server:
                value:
                  itemId: rs.iudx.org.in
                  itemType: resource_server
                  role: admin
              Delegate requesting catalogue token:
                value:
                  itemId: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/catalogue.iudx.org.in/catalogue/crud
                  itemType: resource
                  role: delegate
              identity token for APD as consumer:
                value:
                  itemId: apd.iudx.org.in
                  itemType: resource_server
                  role: consumer
              identity token for APD as trustee:
                value:
                  itemId: apd.iudx.org.in
                  itemType: resource_server
                  role: trustee
              identity token for resource_server as provider:
                value:
                  itemId: rs.iudx.org.in
                  itemType: resource_server
                  role: provider
              Requesting resource with context object in body:
                value:
                  itemId: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-aqm
                  itemType: resource_group
                  role: consumer
                  context:
                    accessId: 1e5aad64-102c-4688-892f-c6a1f5f4d476
                    accessType: PERMANENT_ACCESS
        description: |-
          - `itemId` : the string value of the id of the resource
            - e.g. `datakaveri.org/facec5182e3bf44cc3ac42b0b611263676d668a2/rs.iudx.org.in/agartala-env-aqm`
          - `itemType` : the kind of item the desired resource is
          - `role` : the role as which the user wants to get token for
          - `context` : a JSON object containing any extra information. The user may use this field to convey information to an APD in case the requested resource is backed by an APD policy
        required: true
      description: |
        Request for a JWT (token). One can generate token using either by providing token header or providing clientId and clientSecret in the header.

        **NOTE : Either the JWT token in the `Authorization` header or `clientId`+`clientSecret` headers are required, not both**

        # Identity Token
        An Identity token is used by a user to identify themself to a resource server or APD.
          - Valid item types - `resource_server`
          - Item ID - URL of the server or APD
          - Users with any role can get an identity token for either a resource server or APD

          **NOTE : If role is `admin` or `trustee`, the user must own the resource server or APD respectively.**

          **NOTE : Users can be permitted to obtain identity tokens with the `admin` role if required.**

        # Access Token
        An Access token is used to gain access to an Item on the resource server.

          ## Tokens for providers
           - Valid item types - `resource`, `resource_group`
           - users with the `provider` role can get tokens for all of the resources that belong to them without having to set any specific policies to access them.
           - If the provider wishes to get a token to access a particular server, they require a **policy by the server admin**.

        e.g.  A provider can get a token for the IUDX catalogue server by using the `itemId` as `<provider-domain>/<SHA1-of-provider-email>/<catalogue-url>/catalogue/crud`

        For example, if the provider is *provider.foobar@datakaveri.org*, the `itemId` will be
        ```
        datakaveri.org/49276e9045a8a4c5c5bcc5b3b6923786896ff02d/catalogue.iudx.org.in/catalogue/crud
        ```

          ## Tokens for delegates
          - Valid item types - `resource`, `resource_group`
          - Users with the `delegate` role can get tokens for resources if they:
             1. Are a delegate to the provider who owns the resource
             2. Have a policy set by the provider to access the resource
             3. Must have a valid policy set by the admin of the server

        **Note**: The IUDX Catalogue server does not require a policy to be set by the provider (2nd point).

          ## Tokens for consumers
          - Valid item types - `resource`, `resource_group`, `resource_server`
          - Consumers can access the private resources for which they have a policy set by either the `provider` or by a `delegate`.

          ## Tokens for admins
           **Admins are only permitted to get identity tokens.**

          ## Tokens for trustees
           **Trustees are only permitted to get identity tokens.**

          ## JWT Access Token Response Structure
           The JWT is signed using the ES256 algorithm (`alg:ES256`).

           A valid IUDX AAA access token contains the following fields:
           - `sub` : `userId` of the user for whom the token is issued
           - `iss` : this tag contains the url of the server from the where the token was issued(IUDX auth server)
           - `aud` : the 'audience' tag contains the url of the server for which the token is valid
           - `exp` : when the token will expire in Unix format
           - `iat` : indicates when the token was issued in unix format
           - `iid` : resource type and resource id of the item for which the token is valid
           - `role` : role of the user
           - `cons` : the constraints that the resource server recognizes. It is only returned for policies set for consumer
           - `apd` : *(optional)* contains any data sent by the APD as a result of an **Allow** response (see *Resources restricted by APD Policies*)

          # Resources restricted by APD Policies

        In case access to a resource is defined using an APD policy (and there is no valid user policy for the requesting user and resource), the AAA server queries the APD with relevant information to see if the user belongs to the **_user class_** specified in the APD policy. The APD may respond in three ways:
        - **Allow** : The user belongs to the user class. The AAA server generates the access token based on the constraints defined in the policy and sends it back.
            - In case the APD send constraints, these constraints will be put into the `apd` key in the JWT token in a JSON object called `apdConstraints`

        - **Deny** : The user does not belong to the user class. The AAA server returns a `403 Forbidden`.
        - **Deny but the APD needs interaction** : The user does not belong to the user class, but the APD provides a mechanism for the user to interact with it. This interaction **may or may not** result in the user being included in the user class. The AAA server sends a `403 Forbidden` but includes a special **APD JWT token** that the user must use when interacting with the APD.

        ## Context object for extra information
        An APD may require extra information during user class evaluation. Any such information can be included in the `context` JSON object field in the API request body.

        In case an APD requires particular keys in the `context` object, The APD can send a **Deny** response with the details of the required keys and information.

        ## JWT APD Token Response Structure
          The JWT is signed using the ES256 algorithm (`alg:ES256`).

         A valid IUDX AAA APD token contains the following fields:
         - `sub` : `userId` of the user for whom the token is issued
         - `iss` : this tag contains the url of the server from the where the token was issued(IUDX auth server)
         - `aud` : the 'audience' tag contains the url of the server for which the token is valid - in this case, will be the APD URL
         - `exp` : when the token will expire in Unix format
         - `iat` : indicates when the token was issued in unix format
         - `sid` : a session ID sent by the APD
         - `link` : a link to which the user can interact with the APD

      tags:
        - Token APIs
      security:
        - authorization: [ ]
  /auth/v1/introspect:
    post:
      summary: Introspect Token
      operationId: post-auth-v1-introspect
      responses:
        '200':
          description: Token validated.
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Token authenticated
                    results:
                      sub: 129b4b55-0251-490e-bee9-00f3a5d3e632
                      iss: auth.test.com
                      aud: foobar.iudx.io
                      exp: 1626837909
                      iat: 1626794709
                      iid: 'rg:example.com/79e7bfa62fad6c765bac69154c2f24c94c95210v/resource-group'
                      role: consumer
                      cons: { }
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                    required:
                      - sub
                      - iss
                      - aud
                      - exp
                      - iat
                      - iid
                      - role
                      - cons
                    properties:
                      sub:
                        type: string
                        minLength: 1
                      iss:
                        type: string
                        minLength: 1
                      aud:
                        type: string
                        minLength: 1
                      exp:
                        type: number
                      iat:
                        type: number
                      iid:
                        type: string
                        minLength: 1
                      role:
                        type: string
                        minLength: 1
                      cons:
                        type: object
                required:
                  - type
                  - title
                  - results
              examples:
                Introspected Token:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Token authenticated
                    results:
                      sub: a6a23ee3-19fe-4a09-a78f-eb66dcb6b892
                      iss: authorization.iudx.org.in
                      aud: rs.iudx.org.in
                      exp: 1634233203
                      iat: 1634190003
                      iid: 'rg:datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-aqm'
                      role: consumer
                      cons:
                        access:
                          - api
                Introspecting an identity token:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Token authenticated
                    results:
                      sub: 72a08b8b-518f-4bff-b263-0693bc7f2e98
                      iss: authorization.iudx.org.in
                      aud: rs.iudx.org.in
                      exp: 1679935348
                      iat: 1679892148
                      iid: 'rs:rs.iudx.org.in'
                      role: consumer
                      cons: { }
                      userInfo:
                        email: user@datakaveri.org
                        name:
                          firstName: User
                          lastName: DataKaveri
        '400':
          description: |-
            - Missing/malformed token
            - The token has not been issued by the IUDX AAA server
            - The token is expired
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - status
                      properties:
                        status:
                          type: string
                          minLength: 1
                required:
                  - type
                  - title
                  - results
                x-examples:
                  example-1:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    results:
                      - status: deny
              examples:
                Invalid/missing information:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    results:
                      - status: deny
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                accessToken:
                  type: string
                  minLength: 1
                  maxLength: 640
                  example: JWT
              required:
                - accessToken
            examples:
              Introspect Token:
                value:
                  accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJhM2U3ZTM0Yy00NGJmLTQxZmYtYWQ4Ni0yZWUwNGE5NTQ0MTgiLCJpc3MiOiJhdXRoLnRlc3QuY29tIiwiYXVkIjoiZm9vYmFyLml1ZHguaW8iLCJleHAiOjE2MjY0NzMwNDgsImlhdCI6MTYyNjQyOTg0OCwiaWlkIjoicmc6ZXhhbXBsZS5jb20vOGQ0YjIwZWM0YmYyMWVmYjM2M2U3MjY3MWUxYjViZDc3ZmQ2Y2Y5MS9yZXNvdXJjZS1ncm91cCIsInJvbGUiOiJhZG1pbiIsImNvbnMiOnt9fQ.iyQXw21_4cXixVHm45rlHpzYjDz2PfTDRORbdQz9EHlLP_mQ-oBHZaWg1IWcuuoPS4FTRgNXWwM_uLhyxTDcuw
        description: '`accessToken` must be a valid JWT token'
        required: true
      description: |-
        Introspect a JWT token obtained from the AAA server. The API:
        - validates the token structure
        - checks if the token has been issued by the IUDX AAA server
        - checks if the token is expired
        If all checks pass, the decoded token is returned

        If an identity token is introspected, the user information of the user ID represented in the `sub` field is also included in the introspection response.
      tags:
        - Token APIs
    parameters: [ ]
  /auth/v1/token/revoke:
    post:
      summary: Revoke Tokens
      operationId: post-auth-v1-revoke
      responses:
        '200':
          description: Successful token revocation
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    items: { }
                required:
                  - type
                  - title
              examples:
                Token revoked:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Token revoked
                    results: [ ]
        '400':
          description: Invalid/missing information.
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  detail:
                    type: string
                    minLength: 1
                required:
                  - type
                  - title
                  - detail
              examples:
                Bad request:
                  value:
                    type: string
                    title: string
                    detail: string
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Unauthorized:
                  value:
                    type: string
                    title: string
                    detail: string
      description: 'Revoke tokens **issued for a particular resource server**. Once revoked, any tokens issued before the revocation with the `aud` field being the resource server will not be accepted by said resource server.'
      tags:
        - Token APIs
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                rsUrl:
                  type: string
                  minLength: 1
              required:
                - rsUrl
            examples:
              Revoke Request:
                value:
                  rsUrl: rs.iudx.org.in
        required: true
        description: '`rsUrl` is the URL/domain of a server that is recognised by the IUDX AAA '
      security:
        - authorization: [ ]
    parameters: [ ]
  /auth/v1/user/profile:
    post:
      summary: Create User Profile
      operationId: post-auth-v1-user-profile
      responses:
        '201':
          description: The user profile has been created successfully. The client ID and client secret is also returned. **The client secret is ONLY shown to the user here and can never be obtained again.**
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: User created
                    results:
                      keycloakId: c0c52fd1-e9de-456c-b553-8d408e8d2a42
                      name:
                        firstName: Foo
                        lastName: Bar
                      roles:
                        - CONSUMER
                      userId: 67194fc9-495e-40f7-b016-4470c1d4397f
                      clients:
                        - client: default
                          clientId: 6d0b58c3-c0c4-48af-bca2-4f255c0e73a7
                          clientSecret: a18cb9fc-06b3-4ae5-8220-86fc4e89a1a6
                      email: ngoaf@chspomvjuq.com
                      phone: '9989967899'
                      organization:
                        name: example
                        url: example.com
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                    required:
                      - keycloakId
                      - name
                      - roles
                      - userId
                      - clients
                      - email
                    properties:
                      keycloakId:
                        type: string
                        minLength: 1
                      name:
                        type: object
                        required:
                          - firstName
                          - lastName
                        properties:
                          firstName:
                            type: string
                            minLength: 1
                          lastName:
                            type: string
                            minLength: 1
                      roles:
                        type: array
                        items:
                          type: string
                      userId:
                        type: string
                        minLength: 1
                      clients:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          type: object
                          properties:
                            clientName:
                              type: string
                              minLength: 1
                            clientId:
                              type: string
                              minLength: 1
                            clientSecret:
                              type: string
                              minLength: 40
                              maxLength: 40
                              pattern: '^[0-9a-f]{40}$'
                          required:
                            - clientName
                            - clientId
                            - clientSecret
                      email:
                        type: string
                        minLength: 1
                      phone:
                        type: string
                        minLength: 1
                      organization:
                        type: object
                        properties:
                          name:
                            type: string
                            minLength: 1
                          url:
                            type: string
                            minLength: 1
                        required:
                          - name
                          - url
                required:
                  - type
                  - title
                  - results
              examples:
                User Profile Response:
                  value:
                    type: 'urn:dx:as:Success'
                    title: User created
                    results:
                      keycloakId: c0c52fd1-e9de-456c-b553-8d408e8d2a42
                      name:
                        firstName: Foo
                        lastName: Bar
                      roles:
                        - consumer
                      userId: 67194fc9-495e-40f7-b016-4470c1d4397f
                      clients:
                        - clientName: default
                          clientId: 6d0b58c3-c0c4-48af-bca2-4f255c0e73a7
                          clientSecret: 73b66ab55ba4d07ea487310679aa0689b4bd2c9d
                      email: ngoaf@chspomvjuq.com
                      phone: '9919967211'
                      organization:
                        name: example
                        url: example.com
        '400':
          description: |-
            - Malformed or missing data
            - `orgId` not sent when registering as provider/delegate
            - `orgId` does not exist
            - `orgId` domain does not match email address domain
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                Invalid roles array:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Missing or malformed parameters
                    detail: Invalid 'roles' array
                orgId does not exist:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Organization does not exist
                    detail: Organization ID does not correspond to an organization
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
        '409':
          description: A user profile already exists for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                User Already Exists:
                  value:
                    type: 'urn:dx:as:AlreadyExists'
                    title: User exists
                    detail: User has an existing user profile
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
      description: |-
        Create a new user profile. Users are required to have a user profile in order to interact with the IUDX AAA Server. During creation, they may specify what roles they would like to obtain. Current valid roles are:
        - **consumer**, which allows users to access to secure resource via tokens
        - **provider**, which allows users to manage their resources across the IUDX sub systems
        - **delegate**, which allows users to perform tasks on behalf of a provider, mainly
          - manage catalogue items
          - manage data on resource servers
          - manage policies
        - **trustee**, which allows a user to manage an Access Policy Domain (APD)

        ## Client ID and Client Secret
        On successful creation of the user profile, the user would receive a client ID and a client secret. The client ID and client secret can be used instead of the OIDC flow to request for tokens. **The client secret is ONLY shown to the user here and can never be obtained again.**
        ## Provider registration
        **Once a Provider has registered successfully, their registration request is subject to approval by an IUDX admin**. The `provider` role would not be part of the user profile till the user has been approved.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                roles:
                  type: array
                  minItems: 1
                  uniqueItems: true
                  maxItems: 4
                  items:
                    type: string
                    enum:
                      - provider
                      - consumer
                      - delegate
                      - trustee
                    minLength: 5
                    maxLength: 10
                orgId:
                  type: string
                  format: uuid
                  minLength: 36
                  maxLength: 36
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                phone:
                  type: string
                  example: '9900990099'
                  pattern: '^[9876]\d{9}$'
                  minLength: 10
                  maxLength: 10
              required:
                - roles
            examples:
              Create UserProfile:
                value:
                  roles:
                    - provider
                    - consumer
                    - delegate
                  orgId: 123e4567-e89b-12d3-a456-426614174000
        description: |-
          - `orgId` is a valid organization ID obtain from the `GET /auth/v1/organizations` API
          - **`orgId` is required for `provider`, `delegate` and `trustee` roles**
          - **The domain of the email address of the registering user must match the organization domain**
        required: true
      tags:
        - User APIs
      security:
        - authorization: [ ]
    get:
      summary: Get User Profile or Search for User
      operationId: get-auth-v1-user-profile
      responses:
        '200':
          description: Successfully list user profile or successfully found user
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: User details
                    results:
                      keycloakId: c46e7a5d-7c2d-471e-8222-6a59a5095e7a
                      name:
                        firstName: B
                        lastName: c
                      roles:
                        - PROVIDER
                        - CONSUMER
                      userId: a13eb955-c691-4fd3-b200-f18bc78810b5
                      email: bye@example.com
                      clients:
                        - clientName: default
                          clientId: a3e7e34c-44bf-41ff-ad86-2ee04a954418
                      phone: '9984567899'
                      organization:
                        name: example
                        url: example.com
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                    required:
                      - name
                      - userId
                      - email
                    properties:
                      keycloakId:
                        type: string
                        minLength: 1
                      name:
                        type: object
                        required:
                          - firstName
                          - lastName
                        properties:
                          firstName:
                            type: string
                            minLength: 1
                          lastName:
                            type: string
                            minLength: 1
                      roles:
                        type: array
                        items:
                          type: string
                      userId:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      clients:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          type: object
                          properties:
                            clientName:
                              type: string
                              minLength: 1
                            clientId:
                              type: string
                              minLength: 1
                          required:
                            - clientName
                            - clientId
                      phone:
                        type: string
                        minLength: 1
                      organization:
                        type: object
                        properties:
                          name:
                            type: string
                            minLength: 1
                          url:
                            type: string
                            minLength: 1
                        required:
                          - name
                          - url
                required:
                  - type
                  - title
                  - results
              examples:
                Get User Profile:
                  value:
                    type: 'urn:dx:as:Success'
                    title: User details
                    results:
                      keycloakId: c46e7a5d-7c2d-471e-8222-6a59a5095e7a
                      name:
                        firstName: B
                        lastName: c
                      roles:
                        - provider
                        - consumer
                      userId: a13eb955-c691-4fd3-b200-f18bc78810b5
                      email: bye@example.com
                      clients:
                        - clientName: default
                          clientId: a3e7e34c-44bf-41ff-ad86-2ee04a954418
                      phone: '9984567899'
                      organization:
                        name: example
                        url: example.com
                Found user:
                  value:
                    type: 'urn:dx:as:Success'
                    title: User found
                    results:
                      email: someone@example.com
                      userId: a13eb955-c691-4fd3-b200-f18bc78810b5
                      name:
                        firstName: Someone
                        lastName: Person
                      organization:
                        name: example
                        url: example.com
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: |-
            - Invalid `providerId` header
            - Invalid `role`/`email` header
            - If both `role` and `email` header not present
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Invalid providerId:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Malformed request/missing or malformed request parameters
                    detail: '[Bad Request] Validation error for parameter providerId in location HEADER: provided string should have size >= 36'
                role/email header missing:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid search user request
                    detail: Require both 'email' and 'role' header for search user
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - Not a valid auth delegate
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
                Not auth delegate:
                  value:
                    type: 'urn:dx:as:MissingAuthenticationToken'
                    title: Invalid delegate request
                    detail: Invalid delegate request
        '404':
          description: |-
            - A user profile for the user does not exist
            - A user with requested email+role does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                User profile for the user does not exist:
                  value:
                    type: 'urn:dx:as:MissingInformation'
                    title: User profile does not exist
                    detail: Please register to create user profile
                User to be searched for cannot be found:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: User not found
                    detail: A user with given email and role not found
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
            pattern: '^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&''*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&''*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$'
            format: email
          in: header
          name: email
          description: Email of User to be found
        - schema:
            type: string
            enum:
              - provider
              - consumer
              - delegate
          in: header
          name: role
          description: Role of user to be found
        - schema:
            type: string
            pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
            minLength: 36
            maxLength: 36
          in: header
          name: providerId
          description: 'User ID of the provider, if an auth delegate wishes to search for a user'
      description: |-
        Get user profile or search for a user by email address and role.
        ## Get User profile
        The response contains user details such as roles, name, email. It also lists the client ID of the user.
        ## Search for a user
        A user with either
        - `provider` role
        - `admin` role
        - `trustee` role **with valid Auth admin policy**
            - An auth admin policy is automatically created when an APD belonging to a trustee is set to _active_ state by the IUDX AAA admin
        - is an **auth delegate**
        may search for a user by providing the email address and role of said user. If a user exists, then the user ID `userId`, email, name and organization details (if applicable) is returned.

        To search for the user, 2 headers `email` (email address of user) and `role` (role of the user) need to be included. **Both headers need to be present for the search to be attempted.** If an auth delegate is to call the API, the `providerId` header needs to be included. Users with roles `delegate`, `consumer` and `provider` can be searched for.
      tags:
        - User APIs
      security:
        - authorization: [ ]
    put:
      summary: 'Update User Profile - Add roles, regenerate client secret'
      operationId: put-auth-v1-user-profile
      responses:
        '200':
          description: Successfully updated the user profile.
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Registered for requested roles
                    results:
                      keycloakId: c0c52fd1-e9de-456c-b553-8d408e8d2a42
                      name:
                        firstName: Foo
                        lastName: Bar
                      roles:
                        - CONSUMER
                        - DELEGATE
                      userId: 67194fc9-495e-40f7-b016-4470c1d4397f
                      clients:
                        - client: default
                          clientId: 6d0b58c3-c0c4-48af-bca2-4f255c0e73a7
                      email: ngoaf@chspomvjuq.com
                      phone: '9989967899'
                      organization:
                        name: example
                        url: example.com
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                    required:
                      - keycloakId
                      - name
                      - roles
                      - userId
                      - clients
                      - email
                    properties:
                      keycloakId:
                        type: string
                        minLength: 1
                      name:
                        type: object
                        required:
                          - firstName
                          - lastName
                        properties:
                          firstName:
                            type: string
                            minLength: 1
                          lastName:
                            type: string
                            minLength: 1
                      roles:
                        type: array
                        items:
                          type: string
                      userId:
                        type: string
                        minLength: 1
                      clients:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          type: object
                          properties:
                            clientName:
                              type: string
                              minLength: 1
                            clientId:
                              type: string
                              minLength: 1
                            clientSecret:
                              type: string
                          required:
                            - clientName
                            - clientId
                      email:
                        type: string
                        minLength: 1
                      phone:
                        type: string
                        minLength: 1
                      organization:
                        type: object
                        properties:
                          name:
                            type: string
                            minLength: 1
                          url:
                            type: string
                            minLength: 1
                        required:
                          - name
                          - url
                required:
                  - type
                  - title
                  - results
              examples:
                Added roles successfully:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Registered for requested roles
                    results:
                      keycloakId: c0c52fd1-e9de-456c-b553-8d408e8d2a42
                      name:
                        firstName: Foo
                        lastName: Bar
                      roles:
                        - consumer
                        - delegate
                        - trustee
                      userId: 67194fc9-495e-40f7-b016-4470c1d4397f
                      clients:
                        - clientName: default
                          clientId: 25b2c2d5-a7fc-47d0-89e4-8709a1560bfa
                      email: ngoaf@chspomvjuq.com
                      phone: '9989967899'
                      organization:
                        name: example
                        url: example.com
                Regenerated client secret successfully:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Regenerated client secret for requested client ID
                    results:
                      keycloakId: c0c52fd1-e9de-456c-b553-8d408e8d2a42
                      name:
                        firstName: Foo
                        lastName: Bar
                      roles:
                        - consumer
                        - delegate
                      userId: 67194fc9-495e-40f7-b016-4470c1d4397f
                      clients:
                        - clientName: default
                          clientId: 25b2c2d5-a7fc-47d0-89e4-8709a1560bfa
                          clientSecret: cf2f0e52df08ec08d7eb1706f7c63696a41de41e
                      email: ngoaf@chspomvjuq.com
                      phone: '9989967899'
                      organization:
                        name: example
                        url: example.com
        '400':
          description: |-
            - Missing or malformed data
            - User has already registered for a requested role
            - `orgId` does not exist
            - `orgId` required for delegate registration
            - `orgId` domain does not match the domain of the email address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                orgId does not exist:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Organization does not exist
                    detail: Organization ID does not correspond to an organization
                Invalid roles array:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Missing or malformed parameters
                    detail: Invalid 'roles' array
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
        '404':
          description: |-
            - A user profile for the user does not exist.
            - The client ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                User profile does not exist:
                  value:
                    type: 'urn:dx:as:MissingInformation'
                    title: User profile does not exist
                    detail: Please register to create user profile
                Client ID does not exist:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid client ID
                    detail: Requested client ID not found
      description: |-
        Update an existing user profile. Currently a user may use this API to:
        - Add roles to their user profile
        - Regenerate a client secret corresponding to a client ID (and as a result, revoking all tokens issued in the user's name)

        **NOTE: The operations cannot be done simultaneously.**

        ## Add roles
        A user may add `consumer`, `delegate` and `trustee` roles to their user profile. **The `provider` role cannot be added**.

        ## Regenerate client secret
        A user may regenerate a client secret corresponding to a client ID in case they have lost the client secret or it has been compromised. A new client secret will be generated and sent as part of the output **and will not be shown again.**

        ### Token revocation before regeneration
        In addition to regenerating the client secret, **the AAA server notifies all servers recognized by IUDX to revoke all tokens issued in the user's name (with the user's credentials) before the regeneration request was made**. The AAA server is effectively calling the `POST /auth/v1/token/revoke` API for all servers on behalf of the user. This is done to account for the scenario where the client secret has been compromised and tokens have been issued by a malicious user.
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              x-examples:
                example-1:
                  roles:
                    - provider
                    - consumer
                    - delegate
                  orgId: 123e4567-e89b-12d3-a456-426614174000
              oneOf:
                - additionalProperties: false
                  properties:
                    roles:
                      type: array
                      minItems: 1
                      uniqueItems: true
                      maxItems: 3
                      items:
                        type: string
                        enum:
                          - consumer
                          - delegate
                          - trustee
                        minLength: 5
                        maxLength: 10
                    orgId:
                      type: string
                      format: uuid
                      minLength: 36
                      maxLength: 36
                      pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                  required:
                    - roles
                - additionalProperties: false
                  properties:
                    clientId:
                      type: string
                      pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                      minLength: 36
                      maxLength: 36
                      format: uuid
                      description: A valid client ID belonging to the user
                  required:
                    - clientId
              type: object
            examples:
              Add roles:
                value:
                  roles:
                    - consumer
                    - delegate
                    - trustee
                  orgId: 123e4567-e89b-12d3-a456-426614174000
              Regenerate client secret:
                value:
                  clientId: 25b2c2d5-a7fc-47d0-89e4-8709a1560bfa
        description: |-
          - `orgId` is a valid organization ID obtain from the `GET /auth/v1/organizations` API
          - **`orgId` is required for `delegate` or `trustee` roles**
          - `clientId` is a valid client ID (belonging to the user) whose corresponding client secret needs to be generate
        required: true
      tags:
        - User APIs
      security:
        - authorization: [ ]
  /auth/v1/organizations:
    get:
      summary: Get Organization Details
      tags:
        - Organization APIs
      responses:
        '200':
          description: Successfully retrieving the registered Organization details
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Organizations
                    results: [ ]
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        url:
                          type: string
                required:
                  - type
                  - title
                  - results
              examples:
                Get Organization Details:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Organizations
                    results:
                      - id: bc51dfff-ee8b-4438-8c0c-5881a482e124
                        name: example
                        url: example.com
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
      operationId: get-auth-v1-organizations
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
      description: Listing the details of registered Organization
      security:
        - authorization: [ ]
  /auth/v1/admin/organizations:
    post:
      summary: Create Organization
      operationId: post-auth-v1-admin-organizations
      responses:
        '201':
          description: An organization has been created successfully.
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                    properties:
                      id:
                        type: string
                        minLength: 1
                      name:
                        type: string
                        minLength: 1
                      url:
                        type: string
                    required:
                      - id
                      - name
                      - url
                required:
                  - type
                  - title
                  - results
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: User created
                    results:
                      id: id
                      name: name
                      url: ''
              examples:
                Create Organization:
                  value:
                    type: string
                    title: string
                    results:
                      id: string
                      name: string
                      url: string
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: |-
            - Malformed or missing data
            - Invalid `url`
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Invalid url:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid URL
                    detail: The domain is invalid
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - User is not an admin of IUDX AAA server
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
                User is not admin of AAA:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: Not admin of auth server
                    detail: You are not an admin of the auth server
        '409':
          description: If an organization with the requested `url`/domain already exists
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAlreadyExists'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:AlreadyExists'
                    title: Domains exists
                    detail: An organization exists with the given domain
      description: 'Register an Organization. This operation can be performed by an `admin` of the IUDX AAA server. '
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  name: Example
                  url: example.com
              properties:
                name:
                  type: string
                  minLength: 1
                  pattern: '^[a-zA-Z0-9]+(?:(?: |['' -])[a-zA-Z0-9]+)*$'
                  maxLength: 100
                url:
                  type: string
                  minLength: 1
                  maxLength: 100
              required:
                - name
                - url
            examples:
              Create Organization:
                value:
                  name: Data Kaveri
                  url: datakaveri.org
        description: |-
          - The payload must have `name` and `url` to create a Organization.
          - `url` must be a **valid domain/hostname**. This domain must match the domain used in the email addresses of the particular organization.
          - The authentication details must be `admin` oriented. It must be the owner of the server.
        required: true
      tags:
        - Admin APIs
      security:
        - authorization: [ ]
  /auth/v1/admin/provider/registrations:
    get:
      summary: Get Provider Registrations
      tags:
        - Admin APIs
      responses:
        '200':
          description: 'Successfully listing providers, their details with status.'
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Provider registrations
                    results:
                      - userId: 543e251b-532b-46e6-9247-f76f1f70a664
                        status: APPROVED
                        email: test@gmail.com
                        name:
                          firstName: First
                          lastName: Last
                        organization:
                          name: Foo
                          url: foo.bar.in
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          minLength: 1
                        status:
                          type: string
                          minLength: 1
                          enum:
                            - approved
                            - rejected
                            - pending
                        email:
                          type: string
                          minLength: 1
                        name:
                          type: object
                          properties:
                            firstName:
                              type: string
                              minLength: 1
                            lastName:
                              type: string
                              minLength: 1
                          required:
                            - firstName
                            - lastName
                        organization:
                          type: object
                          properties:
                            name:
                              type: string
                              minLength: 1
                            url:
                              type: string
                              minLength: 1
                          required:
                            - name
                            - url
                      required:
                        - userId
                        - status
                required:
                  - type
                  - title
                  - results
              examples:
                List of approved providers:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Provider registrations
                    results:
                      - userId: 844e251b-574b-46e6-9247-f76f1f70a637
                        status: approved
                        email: xy@iisc.ac.in
                        name:
                          firstName: X
                          lastName: 'Y'
                        organization:
                          name: IISc
                          url: iisc.ac.in
                      - userId: a13eb955-c691-4fd3-b200-f18bc78810b5
                        status: approved
                        email: someone@example.com
                        name:
                          firstName: Someone
                          lastName: Person
                        organization:
                          name: example
                          url: example.com
                      - userId: d34b1547-7281-4f66-b550-ed79f9bb0c36
                        status: approved
                        email: individual@example.com
                        name:
                          firstName: Indiv
                          lastName: Vidual
                        organization:
                          name: example
                          url: example.com
                List of rejected providers:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Provider registrations
                    results:
                      - userId: e5bf3f6f-f22b-463d-aacb-cd62fbd8056f
                        status: rejected
                        organization:
                          name: lmwohberob
                          url: lmwohberob.com
                      - userId: fd0dfa08-d87a-4a51-86ce-060424f981c5
                        status: rejected
                        organization:
                          name: fufwcudijj
                          url: fufwcudijj.com
        '400':
          description: '- Invalid filter value'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid 'filter' value
                    detail: Invalid 'filter' value
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - User is not admin of IUDX AAA server
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
                Not admin of AAA:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: Not admin of auth server
                    detail: You are not an admin of the auth server
      operationId: get-auth-v1-admin-provider-registrations
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
            enum:
              - pending
              - approved
              - rejected
            maxLength: 8
            minLength: 7
            default: pending
          in: query
          name: filter
          description: Filter the status of the Registration
      description: |-
        Get all the provider registration details. This operation can be performed by an `admin` of the IUDX AAA server.
        The request can be filtered based on the status of registration using the query param `filter`.
        The various statuses are:
        - `pending`
        - `approved`
        - `rejected`

        If no `filter` value is given, registrations with status `pending` is returned.
      security:
        - authorization: [ ]
    put:
      summary: Update Provider Registration status
      operationId: put-auth-v1-admin-provider-registrations
      responses:
        '200':
          description: Provider status successfully updated
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Provider status updated
                    results:
                      - status: APPROVED
                        userId: 844e251b-574b-46e6-9247-f76f1f70a637
                        email: bob_provider@iisc.ac.in
                        name:
                          firstName: Bob
                          lastName: Provider
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                          minLength: 1
                          enum:
                            - approved
                            - rejected
                        userId:
                          type: string
                          minLength: 1
                        email:
                          type: string
                          minLength: 1
                        name:
                          type: object
                          required:
                            - firstName
                            - lastName
                          properties:
                            firstName:
                              type: string
                              minLength: 1
                            lastName:
                              type: string
                              minLength: 1
                      required:
                        - status
                        - userId
                        - email
                        - name
                required:
                  - type
                  - title
                  - results
              examples:
                Provider Status Update:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Provider status updated
                    results:
                      - status: approved
                        userId: 355e251b-574b-46e6-9247-f76f1f70a123
                        email: test@gmail.com
                        name:
                          firstName: First
                          lastName: Last
        '400':
          description: |-
            - Missing or malformed request
            - Duplicate `userId`s in request
            - Invalid `userId`or User is not provider/pending provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                User ID not pending/userId does not exist:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: 'Invalid User ID, not a provider/pending provider'
                    detail: c34b1565-7281-4f66-b220-ed79f9bb0a31
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - User is not admin of IUDX AAA server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
                User is not admin of AAA:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: Not admin of auth server
                    detail: You are not an admin of the auth server
      description: |-
        Update the status of multiple Provider registrations to `approved` or `rejected`.This operation can be performed by an `admin` of the IUDX AAA server.
        The API takes the provider's user ID (obtained from the `GET /auth/v1/admin/provider/registrations` API) and the status to update.
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              x-examples:
                example-1:
                  - userId: d34b1547-7281-4f66-b550-ed79f9bb0c36
                    status: approved
              properties:
                request:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                        pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                        minLength: 36
                        maxLength: 36
                      status:
                        type: string
                        enum:
                          - approved
                          - rejected
                        minLength: 7
                        maxLength: 8
                    required:
                      - userId
                      - status
              required:
                - request
            examples:
              Updating Registration status:
                value:
                  request:
                    - userId: c34b1565-7281-4f66-b220-ed79f9bb0a31
                      status: approved
        required: true
        description: The request is an object with key `request` having value as an array of objects containing the provider's `userId` and the `status` to be updated for said provider
      tags:
        - Admin APIs
      security:
        - authorization: [ ]
  /auth/v1/policies:
    get:
      summary: Get Policies
      tags:
        - Policies APIs
      responses:
        '200':
          description: |-
            Successfully lists the policies

          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: policy read
                    results:
                      - policyId: b45148b0-6bb7-4ab5-91f6-7c7146cefe42
                        itemType: resource_server
                        expiryTime: '2022-09-09T04:22:36'
                        constraints: { }
                        itemId: rs.iudx.io
                        user:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        policyId:
                          type: string
                          minLength: 1
                        itemType:
                          type: string
                          minLength: 1
                        expiryTime:
                          type: string
                          minLength: 1
                        constraints:
                          type: object
                        itemId:
                          type: string
                          minLength: 1
                        user:
                          type: object
                          properties:
                            email:
                              type: string
                              minLength: 1
                            name:
                              type: object
                              required:
                                - firstName
                                - lastName
                              properties:
                                firstName:
                                  type: string
                                  minLength: 1
                                lastName:
                                  type: string
                                  minLength: 1
                            id:
                              type: string
                              minLength: 1
                          required:
                            - email
                            - name
                            - id
                        owner:
                          type: object
                          required:
                            - email
                            - name
                            - id
                          properties:
                            email:
                              type: string
                              minLength: 1
                            name:
                              type: object
                              required:
                                - firstName
                                - lastName
                              properties:
                                firstName:
                                  type: string
                                  minLength: 1
                                lastName:
                                  type: string
                                  minLength: 1
                            id:
                              type: string
                              minLength: 1
                        apd:
                          type: object
                          properties:
                            owner:
                              type: object
                              properties:
                                email:
                                  type: string
                                '':
                                  type: object
                                  properties:
                                    firstName:
                                      type: string
                                    lastName:
                                      type: string
                                id:
                                  type: string
                            url:
                              type: string
                            status:
                              type: string
                            name:
                              type: string
                            id:
                              type: string
                      required:
                        - policyId
                        - itemType
                        - expiryTime
                        - constraints
                        - itemId
                        - owner
                required:
                  - type
                  - title
                  - results
              examples:
                Listing of policies set for a resource server:
                  value:
                    type: 'urn:dx:as:Success'
                    title: policy read
                    results:
                      - policyId: b45148b0-6bb7-4ab5-91f6-7c7146cefe42
                        itemType: resource_server
                        expiryTime: '2022-09-09T04:22:36'
                        constraints: { }
                        itemId: rs.iudx.io
                        user:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
                Listing of policies set for a resource group:
                  value:
                    type: 'urn:dx:as:Success'
                    title: policy read
                    results:
                      - policyId: 5055ca31-937b-4a5e-b301-449ca35c123b
                        itemType: resource_group
                        expiryTime: '2022-09-09T04:22:36'
                        constraints:
                          access:
                            - sub
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood
                        user:
                          email: vasanth.rajaraman@datakaveri.org
                          name:
                            firstName: Vasanth
                            lastName: Rajaraman
                          id: 15c7506f-c800-48d6-adeb-0542b03947c6
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
                Listing of policies set for a resource:
                  value:
                    type: 'urn:dx:as:Success'
                    title: policy read
                    results:
                      - policyId: 11178f10-0b62-4d9f-a1c6-4cb8f7c173d0
                        itemType: resource
                        expiryTime: '2022-09-09T04:22:36'
                        constraints: { }
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta
                        user:
                          email: kailash.adhikari@india.nec.com
                          name:
                            firstName: Kailash
                            lastName: Adhikari
                          id: 2563e6d4-5884-40e8-9d9f-e84ee956298b
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
                Listing of policies set by a trustee for a provider:
                  value:
                    type: 'urn:dx:as:Success'
                    title: policy read
                    results:
                      - policyId: 21abcc77-8917-4a12-8a48-42016552ed30
                        itemType: apd
                        expiryTime: '2027-03-22T00:00'
                        constraints: { }
                        itemId: apd-test.datakaveri.org
                        user:
                          email: provider@datakaveri.org
                          name:
                            firstName: Provider
                            lastName: DK
                          id: 1d4e251b-514b-46e6-9547-f7661f70ae37
                        owner:
                          email: trustee@datakaveri.org
                          name:
                            firstName: Trustee
                            lastName: DK
                          id: a3be2d18-24cb-40d6-8a5e-f073aacbe519
                Listing of APD policies:
                  value:
                    type: 'urn:dx:as:Success'
                    title: policy read
                    results:
                      - policyId: 36f9ffe1-0b27-412a-80c6-7c90ee2c0421
                        userClass: TestingUserClass
                        itemType: resource_group
                        expiryTime: '2027-03-22T00:00'
                        constraints: { }
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/sub-sample
                        owner:
                          email: provider@datakaveri.org
                          name:
                            firstName: Provider
                            lastName: DK
                          id: 1d4e251b-514b-46e6-9547-f7661f70ae37
                        apd:
                          owner:
                            email: trustee@datakaveri.org
                            name:
                              firstName: Trustee
                              lastName: DK
                            id: a3be2d18-24cb-40d6-8a5e-f073aacbe519
                          url: apd-testing.datakaveri.org
                          status: active
                          name: Test APD
                          id: 88b7bdbc-936c-4478-8059-f95f4c8a6352
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      operationId: get-auth-v1-policies
      description: |-
        Get policies related to a particular user. The response depends on the roles the user has
        - `provider` : returns all policies created by the provider/auth delegate of the provider and the policies set for the provider. Also returns any **APD policies** set by the provider.
        - `delegate` : returns all policies set for the delegate
        - `consumer` : returns the policies set for the consumer
        - `trustee` or `admin` : returns all policies set by them

        ## Auth delegate
        An auth delegate may use the API to view policies on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
            format: uuid
            pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
            minLength: 36
            maxLength: 36
          in: header
          description: 'User ID of the provider, if an auth delegate wishes to view delegations of their provider'
          name: providerId
      security:
        - authorization: [ ]
    parameters: [ ]
    delete:
      summary: Delete Policies
      operationId: delete-auth-v1-policies
      responses:
        '200':
          description: Successfully deleted the User Policies
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                type: object
              examples: { }
        '400':
          description: |-
            Bad Request- Error or exceptions
            -id is not a valid a policyId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            Forbidden
            -User does not own the policy or is not a auth delegate to the owner of the policy
        '404':
          description: If the requested policies not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      description: |-
        Delete policies created by a user. User policies and APD policies can be deleted.
        The request would contain objects with a key `id`, i.e. the ID of the user policy or APD policy that the user wants to delete. The user can use the List Policy API to get the policy IDs.
        ## Auth delegate
         - An auth delegate may use the API to delete policies on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
            pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
            minLength: 36
            maxLength: 36
            format: uuid
          in: header
          name: providerId
          description: 'User ID of the provider, if an auth delegate wishes  to delete policy on behalf of a provider'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  request:
                    - id: ''
                    - id: ''
              properties:
                request:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                        minLength: 36
                        maxLength: 36
                    required:
                      - id
              required:
                - request
            examples:
              Delete Policies:
                value:
                  request:
                    - id: 231f6eca-6276-4993-bfeb-53cbbbba6f06
                    - id: 231f6eca-6276-4993-bfeb-53cbbbba6f0b
        description: Request body is a JsonObject containing a JsonArray having one or multiple ID Objects to delete policies.
        required: true
      tags:
        - Policies APIs
      security:
        - authorization: [ ]
    post:
      summary: Create Policies
      operationId: post-auth-v1-policies
      responses:
        '200':
          description: The policies have been created successfully
          content:
            application/json:
              schema:
                type: object
                properties: { }
        '400':
          description: |-
            - Missing or malformed data
            - Invalid expiry - dateTime in the past or invalid format
            - Invalid user - UserId is not present in db
            - Invalid resource Servers - If the resource server that the policy is being set for is not present in the db
            - Invalid APDs - If the APD that the policy is being set for is not present in the db
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            - If the user trying to set a policy does not have an `admin`, `provider`, `trustee` or `delegate` role
            - If the user trying to set a policy does not have a policy by the AAA admin or trustee (in case of APD policies)
            - If the user is neither the owner of the resource item/group or a delegate to the owner of the resource
            - If a valid policy already exists
          content:
            application/json:
              schema:
                type: object
                properties: { }
      description: |
        Allows users to create policies for entities they own. There are mainly 2 kinds of policies that can be set:
        - **User Policies** : A policy set for a particular user.
        - **APD Policies** : A policy set for **_user class_** defined by an Access Policy Domain (APD). If the APD claims that a particular user belongs to said user class, access is granted.
        **NOTE : A `consumer` cannot set policies**

        ## Policies created by admin
        - Valid item types - `resource_server`.
        - An `admin` can set **user policies** for a `provider`,`delegate` or `trustee` for their server.
        - **A policy is automatically set by the AAA admin for a provider when they are approved.**
        - **A policy is automatically set by the AAA admin for a trustee when their APD is set to active state.**

        ## Policies created by trustee
        - Valid item types - `apd`.
        - A `trustee` can write **user policies** for `providers` for APDs they own.
        - This policy allows providers to be able to use the APD for APD policies on their own resources.

        ## Policies created by provider

        ### User Policies
        - Valid item types - `resource`, `resource_group`
        - A `provider` can set **user policies** for a `delegate` or `consumer` for the resources owned by the `provider`.

        ### APD Policies
        - Valid item types - `resource`, `resource_group`
        - A `provider` can set **APD policies** for the resources owned by the `provider.` Access is granted if the user belongs to a `userClass` defined by the APD.
        - **Providers must have a policy set by the concerned trustee to be able to set APD policies using a particular APD.**
        - **The trustee policy also allows auth delegates working on behalf of the provider to set APD policies.**
        - **The concerned APD must be in `active` state.**

        ## Policies created by delegate
        - **NOTE : Only auth delegates are allowed to create policies**
        - An auth delegate may use the API to create policies on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.
        - **A policy must be set by the auth server admin for the `delegate` to be able to set policies.**

        ### User Policies
        - Valid item types - `resource`, `resource_group`
        - A `delegate` can set **user policies** for other `delegate` or `consumer` for the resources owned by the `provider`

        ### APD Policies
        - Valid item types - `resource`, `resource_group`
        - A `delegate` can set **APD policies** for the resources owned by the `provider`.
        - The `provider` for whom the auth delegate is operating **must have a policy set by the concerned trustee for the particular APD**. The `delegate` need not have any such policy.
        - **The concerned APD must be in `active` state.**

      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
            format: uuid
            pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
            minLength: 36
            maxLength: 36
          in: header
          name: providerId
          description: 'User ID of the provider, if an auth delegate wishes to create policy on behalf of a provider'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  request:
                    - userId: 89bbe934-5f18-4f57-b68e-fb821ba77291
                      itemId: example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group
                      itemType: resource_group
                      expiryTime: '2023-08-30T21:10:06.834292'
                      constraints: { }
                    - userId: 89bbe934-5f18-4f57-b68e-fb821ba77292
                      itemId: example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group
                      itemType: resource_group
                      expiryTime: '2023-08-30T21:10:06.834292'
                      constraints: { }
              properties:
                request:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    anyOf:
                      - additionalProperties: false
                        properties:
                          userId:
                            type: string
                            format: uuid
                            minLength: 36
                            maxLength: 36
                            pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                          itemId:
                            type: string
                            minLength: 1
                            maxLength: 512
                            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
                          itemType:
                            type: string
                            minLength: 1
                            enum:
                              - resource
                              - resource_group
                              - resource_server
                              - apd
                          expiryTime:
                            type: string
                            minLength: 1
                            pattern: '^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$'
                          constraints:
                            type: object
                        required:
                          - userId
                          - itemId
                          - itemType
                          - constraints
                      - additionalProperties: false
                        properties:
                          apdId:
                            type: string
                          itemId:
                            type: string
                            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
                            minLength: 1
                            maxLength: 512
                          itemType:
                            type: string
                            enum:
                              - resource
                              - resource_group
                          userClass:
                            type: string
                            pattern: '^[A-Za-z0-9-_:.]+$'
                            minLength: 1
                            maxLength: 128
                          expiryTime:
                            type: string
                            pattern: '^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$'
                          constraints:
                            type: object
                        required:
                          - apdId
                          - itemId
                          - itemType
                          - userClass
                          - constraints
                    type: object
              required:
                - request
            examples:
              Single request for resource group user policy:
                value:
                  request:
                    - userId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood
                      itemType: resource_group
                      expiryTime: '2022-08-04T20:00:19'
                      constraints:
                        access:
                          - sub
              Single request for resource user policy:
                value:
                  request:
                    - userId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR056
                      itemType: resource
                      expiryTime: '2022-10-10T04:00:19'
                      constraints:
                        access:
                          - api
                          - sub
              Single request for resource server user policy:
                value:
                  request:
                    - userId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemId: authvertx.iudx.io
                      itemType: resource_server
                      expiryTime: '2022-05-12T04:00:19'
                      constraints: { }
              Multiple user policy requests:
                value:
                  request:
                    - userId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood
                      itemType: resource_group
                      expiryTime: '2022-08-04T20:00:19'
                      constraints: { }
                    - userId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR056
                      itemType: resource
                      expiryTime: '2022-10-10T04:00:19'
                      constraints:
                        access:
                          - api
                          - sub
              Single request for trustee 'apd' itemType policy:
                value:
                  request:
                    - userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                      itemId: apd-testing.datakaveri.org
                      itemType: apd
                      expiryTime: '2022-10-10T04:00:19'
                      constraints: { }
              Single request for APD policy:
                value:
                  request:
                    - apdId: apd-testing.datakaveri.org
                      userClass: TestUserClass
                      itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-info
                      itemType: resource_group
                      constraints:
                        access:
                          - apd
          application/xml:
            schema:
              type: object
              properties: { }
        description: |
          Request body will be an JsonObject containing JsonArray of requests. The requests can be either for user policies or APD policies.
          ### User Policy Request :
          - `userId` : UUID of the user for whom policy is to be set.
          - `itemId` : String value of the item for which policy is to be set
          - `itemType` : String value of the item type
          - `expiryTime` : ISO8601 compatible time in UTC(yyyy-MM-dd'T'HH:mm:ss). optional field, if not sent default expiry is set for the policy
          - `constraints` : JsonObject of the constraints that the resource server can recognize.

          ### APD Policy Request :
          - `userClass` : String value of the userClass for whom the policy is to be set.
          - `apdId` : String value of the url of the APD for which the policy is being written.
          - `itemId` : String value of the item for which policy is to be set
          - `itemType` : String value of the item type
          - `expiryTime` : ISO8601 compatible time in UTC(yyyy-MM-dd'T'HH:mm:ss). optional field, if not sent default expiry is set for the policy
          - `constraints` : JsonObject of the constraints that the resource server can recognize.
        required: true
      tags:
        - Policies APIs
      security:
        - authorization: [ ]
  /auth/v1/policies/delegations:
    get:
      summary: Get Delegations
      responses:
        '200':
          description: 'Successfully list delegations. If the user does not have any valid delegations, the `results` array is empty.'
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Delegations
                    results:
                      - id: 0bb3cd2b-331a-474c-8107-becdcbdb0b41
                        url: foobar.iudx.io
                        resource_server: Foobar
                        owner:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        user:
                          email: individual@example.com
                          name:
                            firstName: Indiv
                            lastName: Vidual
                          id: d34b1547-7281-4f66-b550-ed79f9bb0c36
                      - id: 8f79dec9-a327-439c-b00b-731fea264af4
                        url: foobar.iudx.io
                        resource_server: Foobar
                        owner:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        user:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    uniqueItems: true
                    minItems: 0
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          minLength: 1
                        url:
                          type: string
                          minLength: 1
                        server:
                          type: string
                          minLength: 1
                        owner:
                          type: object
                          properties:
                            email:
                              type: string
                              minLength: 1
                            name:
                              type: object
                              required:
                                - firstName
                                - lastName
                              properties:
                                firstName:
                                  type: string
                                  minLength: 1
                                lastName:
                                  type: string
                                  minLength: 1
                            id:
                              type: string
                              minLength: 1
                          required:
                            - email
                            - name
                            - id
                        user:
                          type: object
                          properties:
                            email:
                              type: string
                              minLength: 1
                            name:
                              type: object
                              required:
                                - firstName
                                - lastName
                              properties:
                                firstName:
                                  type: string
                                  minLength: 1
                                lastName:
                                  type: string
                                  minLength: 1
                            id:
                              type: string
                              minLength: 1
                          required:
                            - email
                            - name
                            - id
                      required:
                        - id
                        - url
                        - server
                required:
                  - type
                  - title
                  - results
              examples:
                Success:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Delegations
                    results:
                      - id: 0bb3cd2b-331a-474c-8107-becdcbdb0b41
                        url: foobar.iudx.io
                        server: Foobar
                        owner:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        user:
                          email: individual@example.com
                          name:
                            firstName: Indiv
                            lastName: Vidual
                          id: d34b1547-7281-4f66-b550-ed79f9bb0c36
                      - id: 8f79dec9-a327-439c-b00b-731fea264af4
                        url: foobar.iudx.io
                        server: Foobar
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
                        user:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                User does not have any valid delegations:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Delegations
                    results: [ ]
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: '- Invalid `providerId` header'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Malformed request/missing or malformed request parameters
                    detail: '[Bad Request] Validation error for parameter providerId in location HEADER: provided string should have size >= 36'
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - `providerId` does not match a provider who has assigned the user as a Auth delegate OR is blank
            - User does have the `provider` or `delegate` roles
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Invalid.expired token:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
                Invalid providerId - no delegation exists:
                  value:
                    type: 'urn:dx:as:MissingAuthenticationToken'
                    title: Invalid delegate request
                    detail: Invalid delegate request
                User does not have required roles:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: User does not have roles to use API
                    detail: User with provider/delegate role or is an auth delegate may call the API
      operationId: get-auth-v1-policies-delegations
      description: |-
        Get delegations related to a particular user. The response depends upon the roles that the user has:
        - `provider` : returns all delegations created by the provider/auth delegate of the provider
        - `delegate` : returns all providers who have assigned them as delegates for certain servers

        ## Auth delegate
        An auth delegate may use the API to view delegations on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.

        **NOTE: An auth delegate may not view any delegations related to the auth server.**
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
            format: uuid
            pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
            minLength: 36
            maxLength: 36
          in: header
          name: providerId
          description: 'User ID of the provider, if an auth delegate wishes to view delegations of their provider'
      security:
        - authorization: [ ]
      tags:
        - Delegation APIs
    parameters: [ ]
    delete:
      summary: Delete Delegations
      operationId: delete-auth-v1-policies-delegations
      responses:
        '200':
          description: Successfully deleted the requested delegations
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Deleted requested delegations
                    results: { }
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                required:
                  - type
                  - title
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Deleted requested delegations
                    results: { }
        '400':
          description: |-
            - Invalid `providerId` header
            - Invalid or malformed request
            - An invalid/deleted delegation ID is sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad providerId header:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Malformed request/missing or malformed request parameters
                    detail: '[Bad Request] Validation error for parameter providerId in location HEADER: provided string should have size >= 36'
                Invalid/deleted delegation ID:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid delegation ID
                    detail: 5dd1c776-8ba6-4272-b157-0a5de2035355
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - `providerId` does not match a provider who has assigned the user as a Auth delegate OR is blank
            - User does have the `provider` role or is not an auth delegate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Invalid/Expired token:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
                Invalid providerId - no delegation exists:
                  value:
                    type: 'urn:dx:as:MissingAuthenticationToken'
                    title: Invalid delegate request
                    detail: Invalid delegate request
                User does not have valid roles:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: User does not have roles to use API
                    detail: User with provider role or is an auth delegate may call the API
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: '- If an auth delegate attempts to delete an auth delegation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Auth delegate may not delete auth delegations
                    detail: 8ff57971-10d9-4bc6-ab3b-87dc328c72ce
      description: |
        A provider may delete delegations created by them.
        ## Auth delegate
        An auth delegate may use the API to delete delegations on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.

        **NOTE: An auth delegate may not delete any delegations related to the auth server.**
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
            format: uuid
          in: header
          name: providerId
          description: 'User ID of the provider, if an auth delegate wishes to view delegations of their provider'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              x-examples:
                example-1:
                  - id: 1e435fcb-11ce-4f4d-94c0-adf339932ba4
                  - id: 7d50c547-9f36-4daa-bdc6-cca3c932379d
              properties:
                request:
                  type: array
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                        minLength: 36
                        maxLength: 36
                        format: uuid
                    required:
                      - id
              required:
                - request
            examples:
              Example:
                value:
                  request:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        description: The body is a JSON object with a JSON array containing the delegation IDs. The IDs can be obtained from the `GET /auth/v1/policies/delegations` API
        required: true
      security:
        - authorization: [ ]
      tags:
        - Delegation APIs
    post:
      summary: Create Delegations
      operationId: post-auth-v1-policies-delegations
      responses:
        '200':
          description: OK
        '400':
          description: |-
            Bad Request
            -the user trying to be made a delegate is not registered as a delegate
            -the server url is not present in the db
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            Forbidden
            - No auth policy for the user trying to create a delegate
            - Auth delegate trying to create another auth delegate
            - Delegation already exists
      description: |
        Create new delegations
        - `userId` : UUID of the user who is to be made a delegate.
        - `resourceServerId` : URL of the resource server the user is to be made a delegate for.

        ## Auth delegate
        An auth delegate may use the API to create delegations on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.

        **NOTE: An auth delegate may not create any delegations related to the auth server.**
      parameters:
        - schema:
            type: string
            maxLength: 4000
            minLength: 1
            example: Bearer <JWT>
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
        - schema:
            type: string
          in: header
          name: providerId
          description: 'User ID of the provider, if an auth delegate wishes to view delegations of their provider'
      security:
        - authorization: [ ]
      tags:
        - Delegation APIs
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  request:
                    - resSerId: rs.iudx.io
                      userId: d34b1547-7281-4f66-b550-ed79f9bb0c36
              properties:
                request:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    properties:
                      resSerId:
                        type: string
                        minLength: 1
                      userId:
                        type: string
                        minLength: 36
                        pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
                        maxLength: 36
                        format: uuid
                    required:
                      - resSerId
                      - userId
              required:
                - request
            examples:
              single request:
                value:
                  request:
                    - resSerId: rs.iudx.io
                      userId: d34b1547-7281-4f66-b550-ed79f9bb0c36
              multiple request:
                value:
                  request:
                    - resSerId: rs.iudx.io
                      userId: d34b1547-7281-4f66-b550-ed79f9bb0c36
                    - resSerId: auth.iudx.io
                      userId: d34b1547-7281-4f66-b550-ed79f9bb0c37
        description: The body is a JSON object with a JSON array containing the objects that need to be created.
        required: true
  /auth/v1/policies/requests:
    get:
      summary: List Access Requests
      responses:
        '200':
          description: Successfully listing all the requests of a Consumer or of a providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest'
              examples:
                ListResults:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Access requests
                    results:
                      - requestId: ea48d233-5d3b-4bdb-9545-691680c99cee
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR056
                        itemType: resource
                        status: pending
                        expiryDuration: P1Y2M10DT2H30M
                        constraints:
                          access:
                            - api
                            - sub
                            - file
                        user:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: |-
            - Unauthorized - `token` invalid/expired
            - Unauthorized - `providerId` in case of delegate/provider
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                example-1:
                  value:
                    type: string
                    title: string
                    detail: string
        '404':
          description: No request associated with the User or delegate
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:MissingInformation'
                    title: string
                    detail: string
      operationId: get-auth-v1-policies-requests
      description: |-
        Lists all the access requests of the user calling the API. The response depends on the roles the user has

        - `provider` : The requests that are present for the items owned by a provider are returned.
        - `consumer` : The requests which are created by the consumer are returned.

        ## Auth delegate
        An auth delegate may use the API to view access requests on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.
      parameters:
        - schema:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
          in: header
          name: providerId
          description: Required only if the caller is an auth delegate
        - schema:
            type: string
            example: Bearer <JWT>
            minLength: 1
            maxLength: 4000
          in: header
          name: Authorization
          required: true
          description: Keycloak Issued token
      security:
        - authorization: [ ]
      tags:
        - Notifications APIs
    parameters: [ ]
    post:
      summary: Create Access Requests
      operationId: post-auth-v1-policies-requests
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Access requests
                    results:
                      - requestId: bd5f0bb3-c02c-4e3d-b75c-a6eb8144bddc
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR056
                        itemType: resource
                        status: pending
                        expiryDuration: P1Y2M10DT2H30M
                        constraints:
                          access:
                            - api
                            - sub
                            - file
                        user:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
        '400':
          description: 'Bad Request- Schema validation, missing or incorrect fields & values'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example:
                  value:
                    type: string
                    title: string
                    detail: string
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: string
                    title: string
                    detail: string
      description: |-
        Access requests are made by consumers to request a provider to grant access to the provider's resources. Providers or their associated auth delegates may choose to approve or reject the request. On approval, a policy is written for the consumer for said resource. On rejection, no policy is written.

        Users with the `consumer` role can request access for a resource/resource group:
        - With the expiry time they desire for the associated policy (in case the provider chooses to approve the request)
        - With the constraints they desire for the associated policy (in case the provider chooses to approve the request)

        Users may make multiple access requests with a single API call.

      security:
        - authorization: [ ]
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  request:
                    - itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR03
                      itemType: resource
                      expiryDuration: P1Y2M10DT2H30M
                      constraints: { }
              properties:
                request:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    properties:
                      itemId:
                        type: string
                        minLength: 1
                        pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
                        maxLength: 512
                      itemType:
                        type: string
                        minLength: 1
                        enum:
                          - resource_group
                          - resource
                      expiryDuration:
                        type: string
                        minLength: 1
                        pattern: '^(-?)P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)([DW]))?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$'
                        example: P1Y2M10DT2H30M
                      constraints:
                        type: object
                    required:
                      - itemId
                      - itemType
                      - expiryDuration
                      - constraints
              required:
                - request
            examples:
              Create:
                value:
                  request:
                    - itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035
                      itemType: resource
                      expiryDuration: P1Y2M10DT2H30M
                      constraints:
                        access:
                          - api
                          - sub
                          - file
        description: |
          - `itemId` : The catalogue ID of the item for which the request is to be created.
          - `itemType` : 'resource' or 'resource_group'.
          - `expiryDuration` : Duration for the policy expiry in the ISO-8601 format.
          - `constraints` : The constraints that will be included in the policy that will be created.
        required: true
      tags:
        - Notifications APIs
      parameters:
        - schema:
            type: string
            example: Bearer <JWT>
            minLength: 1
            maxLength: 4000
          in: header
          name: Authorization
          required: true
          description: Keycloak Issued token
    put:
      summary: Update Access Requests
      operationId: put-auth-v1-policies-requests
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest'
              examples:
                Update:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Access requests
                    results:
                      - requestId: bd5f0bb3-c02c-4e3d-b75c-a6eb8144bddc
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR056
                        itemType: resource
                        status: approved
                        expiryDuration: P1Y2M10DT2H30M
                        constraints:
                          access:
                            - api
                            - sub
                            - file
                        user:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
        '400':
          description: 'Bad Request- Schema validation, missing or incorrect fields & values'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      description: |
        Providers or auth delegates can choose to approve or reject **pending** access requests associated with their resources.

        If the request is approved
        - The user can choose to set an alternate expiry duration or constraints from what the consumer requested.
        - The request is modified to the `approved` state
        - A policy is created corresponding to the requested resource with the applicable expiry time and constraints.

        If the request is rejected
        - The request is modified to the `rejected` state

        ## Auth delegate
        An auth delegate may use the API to update access requests on behalf of their provider. This is done by passing the user ID of the provider as a header called `providerId`.
      security:
        - authorization: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              x-examples:
                example-1:
                  request:
                    - requestId: bca11712-f381-46a5-afa3-a29b00568ace
                      status: approved
                      expiryDuration: P1Y2M10DT2H30M
                      constraints:
                        access:
                          - api
                          - sub
                          - file
              properties:
                request:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    properties:
                      requestId:
                        type: string
                        minLength: 36
                        format: uuid
                        maxLength: 36
                      status:
                        type: string
                        minLength: 1
                        enum:
                          - approved
                          - rejected
                      expiryDuration:
                        type: string
                        minLength: 1
                        example: P1Y2M10DT2H30M
                        pattern: '^(-?)P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)([DW]))?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$'
                      constraints:
                        type: object
                    required:
                      - requestId
                      - status
              required:
                - request
            examples:
              Update:
                value:
                  request:
                    - requestId: bca11712-f381-46a5-afa3-a29b00568ace
                      status: approved
                      expiryDuration: P1Y2M10DT2H30M
                      constraints:
                        access:
                          - api
                          - sub
                          - file
              Update-Rejected:
                value:
                  request:
                    - requestId: bca11712-f381-46a5-afa3-a29b00568ace
                      status: rejected
        description: |-
          - `requestId` :  ID of the request. Can get this Id by using the list policy API.
          - `status` : The `provider` or `Auth delegate` can update the status to `approved` or `rejected`.
          - `expiryDuration` : duration of the policy that will be created (Only present for the approved requests).
          - `constraints` :  constraints for the policy if request is approved.
        required: true
      tags:
        - Notifications APIs
      parameters:
        - schema:
            type: string
            example: Bearer <JWT>
            minLength: 1
            maxLength: 4000
          in: header
          name: Authorization
          required: true
          description: Keycloak Issued token
        - schema:
            type: string
          in: header
          description: 'User ID of the provider, if an auth delegate wishes to create policy on behalf of a provider'
          name: providerId
    delete:
      summary: Withdraw Access Requests
      operationId: delete-auth-v1-policies-requests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  title:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        requestId:
                          type: string
                        itemId:
                          type: string
                        itemType:
                          type: string
                        status:
                          type: string
                        expiryDuration:
                          type: string
                        constraints:
                          type: object
                          properties:
                            access:
                              type: array
                              items:
                                type: string
                        user:
                          type: object
                          properties:
                            email:
                              type: string
                            name:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                            id:
                              type: string
                        owner:
                          type: object
                          properties:
                            email:
                              type: string
                            name:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                            id:
                              type: string
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: deleted requests
                    results:
                      - requestId: 383ea497-0de9-4d6f-94c1-e3dd1328d944
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/integration-test
                        itemType: resource_group
                        status: withdrawn
                        expiryDuration: '1 year 2 mons 10 days 02:30:00'
                        constraints:
                          access:
                            - api
                            - sub
                            - file
                        user:
                          email: alice_consumer@iisc.ac.in
                          name:
                            firstName: Alice
                            lastName: Consumer
                          id: fdfb2eb0-f11e-43cb-a737-d17ed592e948
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
              examples:
                successful deletion:
                  value:
                    type: 'urn:dx:as:Success'
                    title: deleted requests
                    results:
                      - requestId: 383ea497-0de9-4d6f-94c1-e3dd1328d944
                        itemId: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/integration-test
                        itemType: resource_group
                        status: withdrawn
                        expiryDuration: '1 year 2 mons 10 days 02:30:00'
                        constraints:
                          access:
                            - api
                            - sub
                            - file
                        user:
                          email: alice_consumer@iisc.ac.in
                          name:
                            firstName: Alice
                            lastName: Consumer
                          id: fdfb2eb0-f11e-43cb-a737-d17ed592e948
                        owner:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
        '400':
          description: The Id does not exist or was not created by the user calling the API or is no longer in the `pending` status
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  title:
                    type: string
                  detail:
                    type: string
                x-examples:
                  example-1:
                    type: 'urn:dx:as:InvalidInput'
                    title: requestId does not exists
                    detail: '[6c61b9c7-6cfd-4d2a-bfc1-217fd56bb8e3]'
              examples:
                item does not es:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: requestId does not exists
                    detail: '[6c61b9c7-6cfd-4d2a-bfc1-217fd56bb8e3]'
        '401':
          description: User with non consumer role trying to call the API
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  title:
                    type: string
                  detail:
                    type: string
                x-examples:
                  example-1:
                    type: 'urn:dx:as:InvalidRole'
                    title: User does not have roles to use API
                    detail: User with consumer role may call the API
              examples:
                example-1:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: User does not have roles to use API
                    detail: User with consumer role may call the API
      description: |-
        A consumer may choose to withdraw access requests they have created, **as long as they are still in the pending state**. A withdrawn request  cannot be approved or rejected by the concerned provider.

        Only users with `consumer` role can call this API.
      security:
        - authorization: [ ]
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Keycloak Issued token
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  request:
                    - id: 6c61b9c7-6cfd-4d2a-bfc1-217fd56bb8e3
              properties:
                request:
                  type: array
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        minLength: 36
                        maxLength: 36
                        pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                    required:
                      - id
              required:
                - request
            examples:
              single delete request:
                value:
                  request:
                    - id: 6c61b9c7-6cfd-4d2a-bfc1-217fd56bb8e3
        description: |-
          - `id` : the UUID of the request that are to be deleted.

          Consumers can get the ids of the requests they want to delete using the list notifications API.
      tags:
        - Notifications APIs
  /auth/v1/cert:
    get:
      summary: Get JWT Certificate
      tags:
        - Certificate API
      responses:
        '200':
          description: Successfully list the Certificate
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cert:
                    type: string
                    minLength: 1
                required:
                  - cert
                x-examples:
                  example-1:
                    cert: |-
                      -----BEGIN CERTIFICATE-----
                      MIIBnzCCAUOgAwIBAgIIBXqRSbCK9qUwDAYIKoZIzj0EAwIFADBCMQkwBwYDVQQGEwAxCTAHBgNVBAgTADEJMAcGA1UEBxMAMQkwBwYDVQQKEwAxCTAHBgNVBAsTADEJMAcGA1UEAxMAMB4XDTIxMDYwNTE1MDEyOFoXDTIyMDUzMTE1MDEyOFowQjEJMAcGA1UEBhMAMQkwBwYDVQQIEwAxCTAHBgNVBAcTADEJMAcGA1UEChMAMQkwBwYDVQQLEwAxCTAHBgNVBAMTADBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABPASn9h2d8LesDX99EiLG8o2D5JE0hhssjNvzBhf82E2VfWdvIR8L2YEn527Kxd+gQSp1rM5TmFtAInsgFCminajITAfMB0GA1UdDgQWBBQUKmbmWE9Kv1PzPjRj5RMoTCErkDAMBggqhkjOPQQDAgUAA0gAMEUCIGysQH9MjOCbTYZQbiwaWGCP3yTFwz4jyRLJYZslloesAiEAvfZaflCesKaeOYS+7htQg0mnnUOlkBRq+POfqoF77fM=
                      -----END CERTIFICATE-----
              examples:
                Certificate:
                  value:
                    cert: |-
                      -----BEGIN CERTIFICATE-----
                      MIIBnzCCAUOgAwIBAgIIBXqRSbCK9qUwDAYIKoZIzj0EAwIFADBCMQkwBwYDVQQGEwAxCTAHBgNVBAgTADEJMAcGA1UEBxMAMQkwBwYDVQQKEwAxCTAHBgNVBAsTADEJMAcGA1UEAxMAMB4XDTIxMDYwNTE1MDEyOFoXDTIyMDUzMTE1MDEyOFowQjEJMAcGA1UEBhMAMQkwBwYDVQQIEwAxCTAHBgNVBAcTADEJMAcGA1UEChMAMQkwBwYDVQQLEwAxCTAHBgNVBAMTADBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABPASn9h2d8LesDX99EiLG8o2D5JE0hhssjNvzBhf82E2VfWdvIR8L2YEn527Kxd+gQSp1rM5TmFtAInsgFCminajITAfMB0GA1UdDgQWBBQUKmbmWE9Kv1PzPjRj5RMoTCErkDAMBggqhkjOPQQDAgUAA0gAMEUCIGysQH9MjOCbTYZQbiwaWGCP3yTFwz4jyRLJYZslloesAiEAvfZaflCesKaeOYS+7htQg0mnnUOlkBRq+POfqoF77fM=
                      -----END CERTIFICATE-----
      operationId: get-auth-v1-cert
      description: Get the JsonObject having certificate to authenticate/validate the generated JWT using `/auth/v1/token`

  /auth/v1/jwks:
    get:
      summary: Get public key in JWKS format.
      tags:
        - Certificate API
      responses:
        '200':
          description: Successfully generated the public key in JWKS format.
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  keys:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - kty
                        - x5t#S256
                        - crv
                        - kid
                        - x5c
                        - x
                        - y
                      properties:
                        kty:
                          type: string
                          minLength: 1
                        x5t#S256:
                          type: array
                          minLength: 1
                        crv:
                          type: string
                          minLength: 1
                        kid:
                          type: string
                          minLength: 1
                        x5c:
                          type: string
                          minLength: 1
                        x:
                          type: string
                          minLength: 1
                        y:
                          type: string
                          minLength: 1
                required:
                  - keys
                x-examples:
                  example-1:
                  keys:
                    - kty: EC
                      x5t#S256: tCrGI3X7KS4WhHwGqR89Z6lWwPidOAb_CFYCzQpQN3M
                      crv: P-256
                      kid: ES256
                      x5c:
                        - MIIBnDCCAT+gAwIBAgIEEC1BXTAMBggqhkjOPQQDAgUAMEIxCTAHBgNVBAYTADEJMAcGA1UECBMAMQkwBwYDVQQHEwAxCTAHBgNVBAoTADEJMAcGA1UECxMAMQkwBwYDVQQDEwAwHhcNMjMwNjA1MDUwODQ4WhcNMjQwNjA0MDUwODQ4WjBCMQkwBwYDVQQGEwAxCTAHBgNVBAgTADEJMAcGA1UEBxMAMQkwBwYDVQQKEwAxCTAHBgNVBAsTADEJMAcGA1UEAxMAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErVwOLOln7NhUdfZOQFfTOtJ62AgdKUeYZm8DgWCWJHaaXT95dipr94zJM+inSuqohVFCTxjajdTH8/O9JO43rKMhMB8wHQYDVR0OBBYEFNH2u8eeqj3509HAFJQS4F5NF4TQMAwGCCqGSM49BAMCBQADSQAwRgIhAL7zHYdN6PFTccFm1y07X0t2mJxNfgOaxihTi2tA9D8AAiEAomGmBvXA72X1gfhK3dhaDSd52BN1fUP/ALYNiyuXHg0=
                      x: rVwOLOln7NhUdfZOQFfTOtJ62AgdKUeYZm8DgWCWJHY
                      y: ml0_eXYqa_eMyTPop0rqqIVRQk8Y2o3Ux_PzvSTuN6w

              examples:
                Certificate:
                  value:
                    keys:
                      - kty: EC
                        x5t#S256: tCrGI3X7KS4WhHwGqR89Z6lWwPidOAb_CFYCzQpQN3M
                        crv: P-256
                        kid: ES256
                        x5c:
                          - MIIBnDCCAT+gAwIBAgIEEC1BXTAMBggqhkjOPQQDAgUAMEIxCTAHBgNVBAYTADEJMAcGA1UECBMAMQkwBwYDVQQHEwAxCTAHBgNVBAoTADEJMAcGA1UECxMAMQkwBwYDVQQDEwAwHhcNMjMwNjA1MDUwODQ4WhcNMjQwNjA0MDUwODQ4WjBCMQkwBwYDVQQGEwAxCTAHBgNVBAgTADEJMAcGA1UEBxMAMQkwBwYDVQQKEwAxCTAHBgNVBAsTADEJMAcGA1UEAxMAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErVwOLOln7NhUdfZOQFfTOtJ62AgdKUeYZm8DgWCWJHaaXT95dipr94zJM+inSuqohVFCTxjajdTH8/O9JO43rKMhMB8wHQYDVR0OBBYEFNH2u8eeqj3509HAFJQS4F5NF4TQMAwGCCqGSM49BAMCBQADSQAwRgIhAL7zHYdN6PFTccFm1y07X0t2mJxNfgOaxihTi2tA9D8AAiEAomGmBvXA72X1gfhK3dhaDSd52BN1fUP/ALYNiyuXHg0=
                        x: rVwOLOln7NhUdfZOQFfTOtJ62AgdKUeYZm8DgWCWJHY
                        y: ml0_eXYqa_eMyTPop0rqqIVRQk8Y2o3Ux_PzvSTuN6w

      operationId: get-auth-v1-jwks
      description: Get the public key in JWKS format to authenticate/validate the generated JWT using `/auth/v1/token`

  /auth/v1/apd:
    get:
      summary: Get registered Access Policy Domains
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - apdId
                        - name
                        - url
                        - status
                      properties:
                        apdId:
                          type: string
                          minLength: 1
                        name:
                          type: string
                          minLength: 1
                        url:
                          type: string
                          minLength: 1
                        status:
                          type: string
                          minLength: 1
                        owner:
                          type: object
                          properties:
                            email:
                              type: string
                              minLength: 1
                            name:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                  minLength: 1
                                lastName:
                                  type: string
                                  minLength: 1
                              required:
                                - firstName
                                - lastName
                            id:
                              type: string
                              minLength: 1
                          required:
                            - email
                            - name
                            - id
                required:
                  - type
                  - title
                  - results
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: Access Policy Domains
                    results:
                      - apdId: 5d019ee7-e1d4-4f65-9a14-2e3b656b7296
                        name: DataKaveri APD
                        url: apd.datakaveri.org
                        status: pending
                        owner:
                          email: trustee@datakaveri.org
                          name:
                            firstName: Trustee
                            lastName: DataKaveri
                          id: 28c387e8-5807-44f7-830f-998e595d1bbe
                      - apdId: 540972fd-43df-43c1-9627-df2402a6b731
                        name: IISc APD
                        url: apd.iisc.ac.in
                        status: active
                        owner:
                          email: trustee@datakaveri.org
                          name:
                            firstName: Trustee
                            lastName: IISc
                          id: 7d379bda-c204-4a97-918f-c24590b0cd6f
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:Success'
                    title: Access Policy Domains
                    results:
                      - apdId: 5d019ee7-e1d4-4f65-9a14-2e3b656b7296
                        name: DataKaveri APD
                        url: apd.datakaveri.org
                        status: pending
                        owner:
                          email: trustee@datakaveri.org
                          name:
                            firstName: Trustee
                            lastName: DataKaveri
                          id: 28c387e8-5807-44f7-830f-998e595d1bbe
                      - apdId: 540972fd-43df-43c1-9627-df2402a6b731
                        name: IISc APD
                        url: apd.iisc.ac.in
                        status: active
                        owner:
                          email: trustee@datakaveri.org
                          name:
                            firstName: Trustee
                            lastName: IISc
                          id: 7d379bda-c204-4a97-918f-c24590b0cd6f
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
        '404':
          description: '- A user profile for the user does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                User profile for the user does not exist:
                  value:
                    type: 'urn:dx:as:MissingInformation'
                    title: User profile does not exist
                    detail: Please register to create user profile
      operationId: get-auth-v1-apd
      description: |-
        Returns registered APDs.
        - If called by the AAA admin, returns all APD registrations
        - If called by a user with `trustee` role, returns all APDs in the **active** state and all the APDs the user has registered
        - If called by a user with any other roles, returns all APDs in the **active** state
      security:
        - authorization: [ ]
      tags:
        - Access Policy Domain (APD) APIs
    post:
      summary: Register an Access Policy Domain
      operationId: post-auth-v1-apd
      responses:
        '200':
          description: The APD has been successfully registered and is pending AAA Admin approval
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: object
                    properties:
                      apdId:
                        type: string
                        minLength: 1
                      name:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      status:
                        type: string
                        minLength: 1
                      owner:
                        type: object
                        properties:
                          email:
                            type: string
                            minLength: 1
                          name:
                            type: object
                            properties:
                              firstName:
                                type: string
                                minLength: 1
                              lastName:
                                type: string
                                minLength: 1
                            required:
                              - firstName
                              - lastName
                          id:
                            type: string
                            minLength: 1
                        required:
                          - email
                          - name
                          - id
                    required:
                      - apdId
                      - name
                      - url
                      - status
                      - owner
                required:
                  - type
                  - title
                  - results
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: The Access Policy Domain has been registered
                    results:
                      apdId: 5d019ee7-e1d4-4f65-9a14-2e3b656b7296
                      name: zppcw
                      url: zppcw.com
                      status: pending
                      owner:
                        email: vgmwddiczi@gmail.com
                        name:
                          firstName: uirsxfqyuj
                          lastName: lgbbcwgcax
                        id: 28c387e8-5807-44f7-830f-998e595d1bbe
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:Success'
                    title: The Access Policy Domain has been registered
                    results:
                      apdId: 5d019ee7-e1d4-4f65-9a14-2e3b656b7296
                      name: DataKaveri APD
                      url: apd.datakaveri.org
                      status: pending
                      owner:
                        email: trustee@datakaveri.org
                        name:
                          firstName: Trustee
                          lastName: DataKaveri
                        id: 28c387e8-5807-44f7-830f-998e595d1bbe
        '400':
          description: |-
            - Malformed or missing data
            - Invalid `url`
            - The APD (`url`) is not responding or has responded incorrectly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                APD not responding/responded incorrectly:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid APD response
                    detail: The APD is not responsive/has not responded correctly
                Invalid url:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid URL
                    detail: The URL is invalid
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
        '403':
          description: '- User does not have the `trustee` role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: Not a trustee
                    detail: Use does not have the trustee role
        '404':
          description: '- A user profile for the user does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                User profile for the user does not exist:
                  value:
                    type: 'urn:dx:as:MissingInformation'
                    title: User profile does not exist
                    detail: Please register to create user profile
        '409':
          description: '- An APD with the provided `url` already exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:AlreadyExists'
                    title: URL already exists
                    detail: An APD with the requested URL already exists
      description: |-
        A registered trustee can register an Access Policy Domain. The AAA admin must approve the registration and set the APD into the **active** state, after which policies can be written using the APD.

        ## APD Requirements during registration
        The APD URL must be provided during registration. The URL must be **reachable** as well as:
        - Must be served on HTTPS at port 443
        - Must not redirect
        Additionally, The `GET /userclasses` API must be implemented and should
        - return `200 OK` with content-type `application/json`
        - send at least an empty JSON object in the response body
      security:
        - authorization: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  pattern: '^[a-zA-Z0-9]+(?:(?: |['' -])[a-zA-Z0-9]+)*$'
                  minLength: 1
                  maxLength: 100
                  description: The name of the APD
                url:
                  type: string
                  description: The APD URL
              required:
                - name
                - url
            examples:
              Example:
                value:
                  name: DataKaveri APD
                  url: apd.datakaveri.org
        required: true
        description: |-
          - Registered users with the `trustee` role are permitted to call the API
          - `url` must be a **valid reachable domain/hostname**. Examples of invalid `url`s are:
            - `https://example.com`
            - `example.com:8080`
            - `example.com/apd`
      tags:
        - Access Policy Domain (APD) APIs
    put:
      summary: Update Access Policy Domain status
      operationId: put-auth-v1-apd
      responses:
        '200':
          description: The statuses of the requested APDs have been updated successfully
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  results:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - apdId
                        - name
                        - url
                        - status
                      properties:
                        apdId:
                          type: string
                          minLength: 1
                        name:
                          type: string
                          minLength: 1
                        url:
                          type: string
                          minLength: 1
                        status:
                          type: string
                          minLength: 1
                        owner:
                          type: object
                          properties:
                            email:
                              type: string
                              minLength: 1
                            name:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                  minLength: 1
                                lastName:
                                  type: string
                                  minLength: 1
                              required:
                                - firstName
                                - lastName
                            id:
                              type: string
                              minLength: 1
                          required:
                            - email
                            - name
                            - id
                required:
                  - type
                  - title
                  - results
                x-examples:
                  example-1:
                    type: 'urn:dx:as:Success'
                    title: The status of the Access Policy Domains have been updated
                    results:
                      - apdId: 11f0335d-0d0a-4f58-99b1-08e60e3f4750
                        name: zwcev
                        url: zwcev.com
                        status: inactive
                        owner:
                          email: iisjnaawjw@gmail.com
                          name:
                            firstName: dxzptlevqi
                            lastName: yfuwqntzmg
                          id: 55530f92-7d84-428c-8c0d-f8b37818ac13
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:Success'
                    title: The status of the Access Policy Domains have been updated
                    results:
                      - apdId: 5d019ee7-e1d4-4f65-9a14-2e3b656b7296
                        name: DataKaveri APD
                        url: apd.datakaveri.org
                        status: active
                        owner:
                          email: trustee@datakaveri.org
                          name:
                            firstName: Trustee
                            lastName: DataKaveri
                          id: 28c387e8-5807-44f7-830f-998e595d1bbe
                      - apdId: 540972fd-43df-43c1-9627-df2402a6b731
                        name: IISc APD
                        url: apd.iisc.ac.in
                        status: inactive
                        owner:
                          email: trustee@datakaveri.org
                          name:
                            firstName: Trustee
                            lastName: IISc
                          id: 7d379bda-c204-4a97-918f-c24590b0cd6f
        '400':
          description: |-
            - Malformed or missing data
            - Invalid/non-existent `apdId`
            - Duplicate APD IDs in `request` array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                Invalid APD ID:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Invalid APD ID
                    detail: 00e3035b-c91d-487a-b67a-a7f7daa12723
                Duplicate APD IDs in request array:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Duplicate APD ID in request
                    detail: 22bf1df3-7704-4be3-b64a-7f1fb8d1e97d
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                Example:
                  value:
                    type: 'urn:dx:as:InvalidAuthenticationToken'
                    title: Token authentication failed
                    detail: Inactive Token
        '403':
          description: |-
            - User is not AAA admin or does not have `trustee` role
            - Cannot change status of a particular APD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                Invalid Roles:
                  value:
                    type: 'urn:dx:as:InvalidRole'
                    title: Invalid roles to call API
                    detail: Trustees and Auth Server Admin may call the API
                Cannot change status of an APD:
                  value:
                    type: 'urn:dx:as:InvalidInput'
                    title: Not allowed to change status for APD ID
                    detail: 073a3628-1f21-4828-bdeb-9620dfd6ed42
        '404':
          description: '- A user profile for the user does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUDX-AAA-Server_Error-Response'
              examples:
                User profile for the user does not exist:
                  value:
                    type: 'urn:dx:as:MissingInformation'
                    title: User profile does not exist
                    detail: Please register to create user profile
      description: |-
        Allows the AAA admins and trustees who have registered APDs to update status.

        The AAA admin may change status:
        - from **pending** to **active**, to allow policies to be written for the APD.
        - from **active** to **inactive**, in case the APD is not responsive or has been compromised
        - from **inactive** to **active**

        The trustee may change status of APDs they have registered:
        - from **active** to **inactive**, to indicate that no new policies may be written using the APD.
        - from **inactive** to **pending**, to allow the AAA admin to reconsider activating the APD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: ''
              x-examples:
                example-1:
                  request:
                    - apdId: 3f08e1ba-f4c0-4ed0-86da-edf7092d6333
                      status: active
              additionalProperties: false
              properties:
                request:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    additionalProperties: false
                    properties:
                      apdId:
                        type: string
                        minLength: 36
                        format: uuid
                        pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                        maxLength: 36
                        description: The APD ID
                      status:
                        type: string
                        minLength: 1
                        enum:
                          - active
                          - inactive
                          - pending
                        description: The status to be changed to
                    required:
                      - apdId
                      - status
              required:
                - request
            examples:
              Example:
                value:
                  request:
                    - apdId: 5d019ee7-e1d4-4f65-9a14-2e3b656b7296
                      status: active
                    - apdId: 540972fd-43df-43c1-9627-df2402a6b731
                      status: inactive
      security:
        - authorization: [ ]
      tags:
        - Access Policy Domain (APD) APIs
components:
  schemas:
    RequestToken:
      description: Request payload for create token
      type: object
      properties:
        itemId:
          type: string
          minLength: 1
        itemType:
          type: string
          minLength: 1
        role:
          type: string
          minLength: 1
      required:
        - itemId
        - itemType
        - role
      title: RequestToken
      x-examples:
        example-1:
          itemId: string
          itemType: string
          role: string
    RevokeToken:
      description: ''
      type: object
      properties:
        clientId:
          type: string
          minLength: 1
        rsUrl:
          type: string
          minLength: 1
      required:
        - clientId
        - rsUrl
    ErrorResponse:
      description: ''
      type: object
      x-examples:
        Example:
          type: string
          title: string
          detail: string
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
        context:
          type: object
          description: Any additional information required
      required:
        - type
        - title
        - detail
    UserAlreadyExists:
      description: ''
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      x-examples: { }
    Unauthorized:
      description: ''
      x-examples:
        example-1:
          value:
            type: 'urn:dx:as:MissingAuthenticationToken'
            title: Missing auth details
            detail: Missing auth details
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
    IUDX-AAA-Server_Error-Response:
      title: Error-Response
      type: object
      x-examples: { }
      properties:
        type:
          type: string
          description: A URN
        title:
          type: string
        detail:
          type: string
      required:
        - type
        - title
        - detail
    AccessRequest:
      description: ''
      type: object
      x-examples:
        Example:
          type: 'urn:dx:as:Success'
          title: User permission requests
          results:
            - requestId: e4619679-f5d9-4eff-9f79-bbded6130bb1
              itemId: string
              itemType: resource_server
              status: pending
              expiryDuration: string
              constraints:
                access:
                  - api
                  - sub
                  - file
              user:
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                email: user@example.com
                name:
                  firstName: string
                  lastName: string
              owner:
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                email: user@example.com
                name:
                  firstName: string
                  lastName: string
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        results:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              requestId:
                type: string
                minLength: 1
                format: uuid
              itemId:
                type: string
                minLength: 1
              itemType:
                type: string
                minLength: 1
              status:
                type: string
                minLength: 1
              expiryDuration:
                type: string
                minLength: 1
              constraints:
                type: object
              user:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                  name:
                    type: object
                    required:
                      - firstName
                      - lastName
                    properties:
                      firstName:
                        type: string
                        minLength: 1
                      lastName:
                        type: string
                        minLength: 1
                required:
                  - id
                  - email
                  - name
              owner:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                  name:
                    type: object
                    required:
                      - firstName
                      - lastName
                    properties:
                      firstName:
                        type: string
                        minLength: 1
                      lastName:
                        type: string
                        minLength: 1
                required:
                  - id
                  - email
                  - name
            required:
              - requestId
              - itemId
              - itemType
              - status
              - expiryDuration
      required:
        - type
        - title
        - results
    User:
      description: ''
      type: object
      properties:
        id:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        name:
          type: object
          properties:
            firstName:
              type: string
              minLength: 1
            lastName:
              type: string
              minLength: 1
          required:
            - firstName
            - lastName
      required:
        - id
        - email
        - name
      x-examples:
        Example:
          id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          email: user@example.com
          name:
            firstName: string
            lastName: string
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            email: user@example.com
            name:
              firstName: string
              lastName: string
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      description: ''
  responses: { }
